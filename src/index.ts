import { callAI, cleanAIResponse } from './ai-request'
import { getPrompt } from './prompt'
import { buildFileTasks, readJsonFile, writeJsonFile, FileTask } from './io-handler'

function parseArgs () {
  const args = process.argv.slice(2)
  const params: Record<string, string | boolean> = {}
  for (const arg of args) {
    if (!arg.startsWith('--')) continue
    const [k, v] = arg.slice(2).split('=')
    const key = k.trim()
    if (!key) continue
    params[key] = v ?? true

    if (key.toUpperCase() === 'OPENROUTER_API_KEY' || key.toUpperCase() === 'APIKEY') {
      process.env.OPENROUTER_API_KEY = String(v)
    }
    if (key.toUpperCase() === 'APIURL') {
      process.env.OPENROUTER_API_URL = String(v)
    }
  }
  return params
}

function parseJsonRobust (raw: string) {
  try {
    return JSON.parse(raw)
  } catch {
    return JSON.parse(cleanAIResponse(raw))
  }
}

async function runTask (task: FileTask, cfg: any) {
  const { lang, file, pendingPath, targetPath, isNew } = task
  console.log(`üü¶ [${lang}] ${file} (${isNew ? 'Êñ∞Â¢û' : 'ÊõøÊç¢'})`)
  const sourceJson = readJsonFile(pendingPath)
  const prompt = getPrompt(JSON.stringify(sourceJson, null, 2), lang)

  let translated = ''
  for (let attempt = 1; attempt <= cfg.retry + 1; attempt++) {
    try {
      console.log(`   ‚îú‚îÄ‚îÄ Ë∞ÉÁî® AI (Â∞ùËØï ${attempt}/${cfg.retry + 1})`)
      translated = await callAI({
        apiKey: cfg.apiKey,
        apiUrl: cfg.apiUrl,
        model: cfg.model,
        prompt,
        timeoutMs: cfg.timeoutMs
      })
      break
    } catch (err) {
      console.warn(`   ‚ö†Ô∏è Ë∞ÉÁî®Â§±Ë¥•: ${err}. ÈáçËØï‰∏≠...`)
      // eslint-disable-next-line promise/param-names
      await new Promise(r => setTimeout(r, attempt * 1000))
    }
  }

  if (!translated) {
    console.error(`   ‚ùå ÁøªËØëÂ§±Ë¥•: ${lang}/${file}`)
    return { ok: false }
  }

  try {
    const json = parseJsonRobust(translated)
    if (!cfg.dry) writeJsonFile(targetPath, json)
    console.log(`   ‚îî‚îÄ‚îÄ ‚úÖ ÂÜôÂÖ•ÊàêÂäü: ${targetPath}\n`)
    return { ok: true }
  } catch (e: any) {
    console.error(`   ‚ùå JSON Ëß£ÊûêÂ§±Ë¥•: ${lang}/${file}\n${translated}`)
    console.error(e.message)
    return { ok: false }
  }
}

export async function main () {
  const args = parseArgs()
  const apiKey =
    (args.apiKey as string) ||
    (args.OPENROUTER_API_KEY as string) ||
    process.env.OPENROUTER_API_KEY ||
    ''
  const apiUrl =
    (args.apiUrl as string) ||
    process.env.OPENROUTER_API_URL ||
    'https://openrouter.ai/api/v1/chat/completions'
  const model = (args.model as string) || 'gpt-4o-mini'
  const concurrency = Number(args.concurrency ?? 2)
  const retry = Number(args.retry ?? 1)
  const dry = Boolean(args.dry ?? false)
  const timeoutMs = Number(args.timeout ?? 60000)

  if (!apiKey) {
    console.error('‚ùå Áº∫Â∞ë OPENROUTER_API_KEY')
    process.exit(1)
  }

  console.log('\nüöÄ ÂêØÂä®ÁøªËØë‰ªªÂä°...')
  console.log(`üåç API: ${apiUrl}`)
  console.log(`üîë Ê®°Âûã: ${model}`)
  console.log(`üßµ Âπ∂Âèë: ${concurrency}`)
  console.log(`üîÅ ÈáçËØï: ${retry}`)
  console.log(`üìù Dry-Run: ${dry ? 'ÂºÄÂêØ' : 'ÂÖ≥Èó≠'}\n`)

  const tasks = buildFileTasks()
  const start = Date.now()
  let ok = 0
  let fail = 0

  const queue = [...tasks]
  const workers = Array.from({ length: concurrency }, async () => {
    while (queue.length) {
      const task = queue.shift()
      if (!task) break
      const result = await runTask(task, { apiKey, apiUrl, model, timeoutMs, retry, dry })
      if (result.ok) ok++
      else fail++
    }
  })

  await Promise.all(workers)
  const used = ((Date.now() - start) / 1000).toFixed(1)
  console.log(`\n‚úÖ ÂÆåÊàê: ÊàêÂäü ${ok}, Â§±Ë¥• ${fail}, ËÄóÊó∂ ${used}s`)
}

if (process.env.NODE_ENV !== 'test') {
  main().catch(e => {
    console.error('üí• Á®ãÂ∫èËøêË°åÂá∫Èîô:')
    console.error(e)
    process.exit(1)
  })
}
